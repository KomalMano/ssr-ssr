"use strict";

var _react = _interopRequireDefault(require("react"));

var _stringRenderer = _interopRequireDefault(require("./string-renderer"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

test('should render without options correctly', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n    </body>\n  </html>\n  ";
  var element = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: "Hello"
  });
  var req = {};
  var res = {
    send: jest.fn()
  };
  (0, _stringRenderer["default"])(req, res, element, htmlData, {});
  expect(res.send).toHaveBeenCalledWith("\n  <html>\n    <body>\n      <div id=\"root\"><div>Hello</div></div>\n    </body>\n  </html>\n  ");
});
test('should render correctly with onFinish', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n      <div id=\"script\"></div>\n    </body>\n  </html>\n  ";
  var el = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: "Hello"
  });
  var req = {};
  var res = {
    send: jest.fn()
  };
  (0, _stringRenderer["default"])(req, res, el, htmlData, {
    onFinish: function onFinish(req1, res1, data) {
      var finalHtml = data.replace('<div id="script"></div>', '<script>window.hello=1</script>');
      res1.send(finalHtml);
    }
  });
  expect(res.send).toHaveBeenCalledWith("\n  <html>\n    <body>\n      <div id=\"root\"><div>Hello</div></div>\n      <script>window.hello=1</script>\n    </body>\n  </html>\n  ");
});
test('should render correctly with onEndReplace', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n      <div id=\"script\"></div>\n    </body>\n  </html>\n  ";
  var el = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: "Hello"
  });
  var req = {};
  var res = {
    send: jest.fn()
  };
  (0, _stringRenderer["default"])(req, res, el, htmlData, {
    onEndReplace: function onEndReplace(data) {
      return data.replace('<div id="script"></div>', '<script>window.hello=1</script>');
    }
  });
  expect(res.send).toHaveBeenCalledWith("\n  <html>\n    <body>\n      <div id=\"root\"><div>Hello</div></div>\n      <script>window.hello=1</script>\n    </body>\n  </html>\n  ");
});
test('should return 500 when the render is failed', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n      <div id=\"script\"></div>\n    </body>\n  </html>\n  ";
  var el = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: new Error('Error thrown')
  });
  var req = {};
  var res = {
    send: jest.fn()
  };
  (0, _stringRenderer["default"])(req, res, el, htmlData, {});
  expect(res.send).toHaveBeenCalledWith(500);
});
test('should render the client app when the render is failed and the renderClientOnError flag is set', function () {
  var htmlData = "\n  <html>\n    <body>\n      <div id=\"root\"></div>\n      <div id=\"script\"></div>\n    </body>\n  </html>\n  ";
  var el = /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: new Error('Error thrown')
  });
  var req = {};
  var res = {
    send: jest.fn()
  };
  (0, _stringRenderer["default"])(req, res, el, htmlData, {
    renderClientOnError: true
  });
  expect(res.send).toHaveBeenCalledWith(htmlData);
});