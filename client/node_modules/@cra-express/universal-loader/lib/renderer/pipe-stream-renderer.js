"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = pipeStreamRenderer;

var _server = require("react-dom/server");

/**
 * Reference:
 * https://reactjs.org/docs/react-dom-server.html#rendertopipeablestream
 * @param {Request} req
 * @param {Response} res
 * @param {JSX.Element} reactEl
 * @param {string} htmlData
 * @param {any} options
 */
function pipeStreamRenderer(req, res, reactEl, htmlData, options) {
  var str;
  var error;
  var segments = htmlData.split("<div id=\"root\">");
  var streaming = reactEl.props.streaming || false;

  var processStream = function processStream(res, stream) {
    res.statusCode = error ? 500 : 200;
    res.setHeader('Content-type', 'text/html');
    var errorScript = error ? '<script type="text/javascript">window.__ssrError=true;</script>' : '';
    res.write(segments[0] + errorScript + '<div id="root">');
    stream.pipe(res);
  };

  try {
    var stream = (0, _server.renderToPipeableStream)(reactEl, {
      onShellReady: function onShellReady() {
        if (typeof options.onShellReady === 'function') {
          return options.onShellReady({
            req: req,
            res: res,
            htmlData: htmlData,
            error: error,
            stream: stream
          });
        }

        if (streaming) {
          processStream(res, stream);
        }
      },
      onAllReady: function onAllReady() {
        if (typeof options.onAllReady === 'function') {
          return options.onAllReady({
            req: req,
            res: res,
            htmlData: htmlData,
            error: error,
            stream: stream
          });
        }

        if (!streaming) {
          processStream(res, stream);
        }

        res.write(segments[1]);
      },
      onError: function onError(e) {
        error = true;
        console.error('crau/ssr-on-error', e.message);
      },
      onShellError: function onShellError(x) {
        /**
         * Return fallback when error
         */
        error = true;
        console.error('crau/ssr-on-shell-error: ', x.message);
        res.send("".concat(segments[0]).concat(errorScript, "\n<div id=\"root\">").concat(segments[1]));
      }
    });
  } catch (e) {
    console.error('crau/ssr-catch-error: ', e.message);
    res.send(500);
  }
}